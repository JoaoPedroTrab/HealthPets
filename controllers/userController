const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const auth = require('../middlewares/Auth');
require('dotenv').config();


const router = express.Router();

const Usuario = require('../models/users');

router.post('/login', async (req, res) => {
    const { username, senha } = req.body;

    const usuario = await Usuario.findOne({ username: username });


    if (!usuario)
        res.status(402).send('Usuário não encontrado');

    if (usuario != null ) {
        if (await bcrypt.compare(senha, usuario.senha)) {
            const token = jwt.sign({ id: usuario.id, nome: usuario.nome }, process.env.JWT_PASSWORD, { expiresIn: '2d' });
            res.status(200).json({
                nome: usuario.nome,
                token: token
            });
        }
        else {
            res.status(401).send('Senha incorreta!');
        }
    }

});

router.post('/cadastro', async (req, res) => {
    const { nome, username, senha, ativo } = req.body;

    const senhaCrypt = await bcrypt.hash(senha, 10);

    const usuario = {
        nome, username, senha: senhaCrypt, ativo
    }
    try {
        await Usuario.create(usuario);
        res.status(201).json(usuario);
    } catch (error) {
        res.status(500).json({ error: error });
    }
});

router.get('/', auth, async (req, res) => {
    try {
        const usuarios = await Usuario.find();
        res.status(200).json(usuarios);
    } catch (error) {
        res.status(500).json({ error: error });
    }
});

router.get('/:id', auth, async (req, res) => {
    try {
        const usuario = await Usuario.findOne({ _id: req.params.id });
        if (!usuario) {
            res.status(422).json({ mensagem: "Usuario não encontrado" });
            return
        }
        res.status(200).json(usuario);
    } catch (error) {
        res.status(500).json({ error: error });
    }
});

router.patch('/:id', auth, async (req, res) => {
    try {
        const id = req.params.id;
        const { nome, usuario, senha, ativo } = req.body;

        const usu = {
            nome, usuario, senha, ativo
        }

        const updateUsu = await Usuario.updateOne({ _id: id }, usu);

        if (updateUsu.matchedCount === 0) {
            res.status(422).json({ mensagem: "Usuario não encontrado" });
            return
        }
        res.status(200).json(usu);
    } catch (error) {
        res.status(500).json({ error: error });
    }
});

router.delete('/:id', auth, async (req, res) => {
    try {
        const id = req.params.id;
        const usuario = await Usuario.findOne({ _id: id });
        if (!usuario) {
            res.status(422).json({ mensagem: "Usuario não encontrado" });
            return;
        }
        await Usuario.deleteOne({ _id: id });
        res.status(200).json({ mensagem: "Excluído com sucesso!" });
    } catch (error) {
        res.status(500).json({ error: error });
    }
});

module.exports = router;